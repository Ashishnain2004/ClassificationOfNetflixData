# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K3ulb8EydtEN9Lx7YgIXwBbetCoBsgho
"""



"""Abhay"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("netflix_titles.csv")
df

sample_data = df.head()
sample_data

sample_data = df.head(2000)
sample_data

sample_data.count()

grouped_data = sample_data.groupby("type")

# Display titles within each category
for category, group in grouped_data:
    print(f"Category: {category}")
    titles = group["title"].tolist()
    for title in titles:
        print(f"- {title}")
    print()

"""Atharv"""

import pandas as pd

grouped_data = sample_data.groupby("type")

# Create a new CSV file for each category
for category, group in grouped_data:
    output_file_path = f"{category}.csv"
    group.to_csv(output_file_path, index=False)
    print(f"Saved data for '{category}' in '{output_file_path}'.")

movies_data=pd.read_csv('Movie.csv')
movies_data

# Extract the duration in minutes from a column named 'duration' (you may have a different column name)
movies_data['duration'] = movies_data['duration'].str.extract('(\d+)').astype(int)

short_threshold = 100
medium_threshold = 150

def classify_duration(duration):
    if duration < short_threshold:
        return "Short"
    elif duration < medium_threshold:
        return "Medium"
    else:
        return "Long"

movies_data['duration_category'] = movies_data['duration'].apply(classify_duration)
movies_data

movies_data.to_csv('Movie.csv', index=False)

movies_data=pd.read_csv('Movie.csv')
movies_data

tv_series = pd.read_csv('TV Show.csv')
tv_series

# Extract the number of seasons from a column named 'seasons' (you may have a different column name)
tv_series['duration'] = tv_series['duration'].str.extract('(\d+)').astype(int)

short_threshold = 1
medium_threshold = 3

def classify_series(seasons):
    if seasons < short_threshold:
        return "Short Series"
    elif seasons < medium_threshold:
        return "Medium Series"
    else:
        return "Long Series"

tv_series['series_category'] = tv_series['duration'].apply(classify_series)
tv_series

tv_series.to_csv('TV Show.csv', index=False)

"""Ashish"""



print("Please choose an option:")
print("1. Movies")
print("2. TV Show")

choice = input("Enter the number of your choice (1 or 2): ")

if choice == "1":
    print("Please choose an option:")
    print("1. Short")
    print("2. Medium")
    print("3. Long")
    choice_duration = input("Enter the number of your choice (1, 2 or 3): ")

    if choice_duration == "1":
      short = movies_data[movies_data["duration_category"] == "Short"]["title"]
      if len(short) == 0:
        print("There's no short movies!")
      for s in short:
        print(s)
    elif choice_duration == "2":
      medium = movies_data[movies_data["duration_category"] == "Medium"]["title"]
      if len(medium) == 0:
        print("There's no medium movies!")
      for m in medium:
        print(m)
    elif choice_duration == "3":
      long = movies_data[movies_data["duration_category"] == "Long"]["title"]
      if len(long) == 0:
        print("There's no long movies!")
      for l in long:
        print(l)
    else:
      print("Invalid choice. Please enter 1, 2 or 3.")
elif choice == "2":
    print("Please choose an option:")
    print("1. Short")
    print("2. Medium")
    print("3. Long")
    choice_duration = input("Enter the number of your choice (1, 2 or 3): ")

    if choice_duration == "1":
      short = tv_series[tv_series["series_category"] == "Short"]["title"]
      if len(short) == 0:
        print("There's no short movies!")
      for s in short:
        print(s)
    elif choice_duration == "2":
      medium = tv_series[tv_series["series_category"] == "Medium Series"]["title"]
      if len(medium) == 0:
        print("There's no medium movies!")
      for m in medium:
        print(m)
    elif choice_duration == "3":
      long = tv_series[tv_series["series_category"] == "Long Series"]["title"]
      if len(long) == 0:
        print("There's no long movies!")
      for l in long:
        print(l)
    else:
      print("Invalid choice. Please enter 1, 2 or 3.")
else:
    print("Invalid choice. Please enter 1 or 2.")

netflix_shows=sample_data[sample_data['type']=='TV Show']

netflix_movies=sample_data[sample_data['type']=='Movie']

"""Abhay ##BCZ OF CLASSIFICATION"""

sns.set(style="darkgrid")
ax = sns.countplot(x="type", data=sample_data, palette="Set2")

"""Ashish ##BCZ OF RATING"""

plt.figure(figsize=(12,10))
sns.set(style="darkgrid")
ax = sns.countplot(x="rating", data=netflix_movies, palette="Set2", order=netflix_movies['rating'].value_counts().index[0:15])

"""Atharv ##CLASSIFICATION OF DATA

"""

country_count=sample_data['country'].value_counts().sort_values(ascending=False)
country_count=pd.DataFrame(country_count)
topcountries=country_count[0:11]
topcountries

import plotly.express as px
data = dict(
    number=[1063,619,135,60,44,41,40,40,38,35],
    country=["United States", "India", "United Kingdom", "Canada", "Spain",'Turkey','Philippines','France','South Korea','Australia'])
fig = px.funnel(data, x='number', y='country')
fig.show()

countries={}
netflix_movies['country']=netflix_movies['country'].fillna('Unknown')
cou=list(netflix_movies['country'])
for i in cou:
    #print(i)
    i=list(i.split(','))
    if len(i)==1:
        if i in list(countries.keys()):
            countries[i]+=1
        else:
            countries[i[0]]=1
    else:
        for j in i:
            if j in list(countries.keys()):
                countries[j]+=1
            else:
                countries[j]=1

"""ABHAY"""

countries_fin={}
for country,no in countries.items():
    country=country.replace(' ','')
    if country in list(countries_fin.keys()):
        countries_fin[country]+=no
    else:
        countries_fin[country]=no

countries_fin={k: v for k, v in sorted(countries_fin.items(), key=lambda item: item[1], reverse= True)}

plt.figure(figsize=(8,8))
ax = sns.barplot(x=list(countries_fin.keys())[0:10],y=list(countries_fin.values())[0:10])
ax.set_xticklabels(list(countries_fin.keys())[0:10],rotation = 90)

"""ASHISH ##TIMELINE"""

plt.figure(figsize=(12,10))
sns.set(style="darkgrid")
ax = sns.countplot(y="release_year", data=netflix_movies, palette="Set2", order=netflix_movies['release_year'].value_counts().index[0:15])

"""Atharv ##DURATION FILTER"""

netflix_movies['duration']=netflix_movies['duration'].str.replace(' min','')
netflix_movies['duration']=netflix_movies['duration'].astype(str).astype(int)
netflix_movies['duration']

"""## DENSITY PLOT"""

sns.set(style="darkgrid")
sns.kdeplot(data=netflix_movies['duration'], shade=True)

